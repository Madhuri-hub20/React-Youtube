https://github.com/acdlite/react-fiber-architecture

1 : What is Virtual DOM ?

What is React Fiber and Explian Architecture ?
-React Fiber is an ongoing reimplementation of React's core algorithm. 
-It is the culmination of over two years of research by the React team.
-The goal of React Fiber is to increase its suitability for areas like animation, layout, and gestures. 
-Its headline feature is incremental rendering: the ability to split rendering work into chunks and spread it out over multiple frames.

2 : What is react fiber fatures?
-key features include the ability to pause, abort, or reuse work as new updates come in; 
the ability to assign priority to different types of updates; and new concurrency primitives.

3 : What is reconciliation?
reconciliation
Ans : The algorithm React uses to diff one tree with another to determine which parts need to be changed.
update
A change in the data used to render a React app. Usually the result of `setState`. Eventually results in a re-render.

4 : write a react application for counter and add one button for icreament and one button for decrement
Ans : 
import { useState } from 'react'

function App() {
  let [counter, setCounter] = useState(15);
  //let counter = 15
  const addValue = () => {
    console.log("Clicked", counter)
    //counter = counter + 1;
    setCounter(counter + 1);
  }
  const removeValue = () => {
    if (counter > 0) {
      setCounter(counter - 1)
      console.log("Removed",
        counter)
    }
  }
  return (
    <>
      <h1>Hook Started</h1>
      <h2>Counter Value : {counter}</h2>
      <button onClick={addValue}>Add Value</button>
      <br />
      <button onClick={removeValue}>Remove Value</button>
    </>
  )
}

export default App

Tell me the output of below functions ?

import { useState } from 'react'

function App() {
  let [counter, setCounter] = useState(15);
  //let counter = 15
  const addValue = () => {
    console.log("Clicked", counter)
    //counter = counter + 1;
    setCounter(counter + 1);
     setCounter(counter + 1);
      setCounter(counter + 1);
       setCounter(counter + 1);
  }
  const removeValue = () => {
    if (counter > 0) {
      setCounter(counter - 1)
      console.log("Removed",
        counter)
    }
  }
  return (
    <>
      <h1>Hook Started</h1>
      <h2>Counter Value : {counter}</h2>
      <btton onClick={addValue}>Add Value</button>
      <br />
      <button onClick={removeValue}>Remove Value</button>
    </>
  )
}

export default App

Output : if counter value is 15 it will become 16

reason in react state update in batches, so fiber finds same variable is there so it execute only one statement at on time.
other statement get ignored.

Solution for updating state continuosly function :

import { useState } from 'react'

function App() {
  let [counter, setCounter] = useState(15);
  const addValue = () => {
    console.log("Clicked", counter)
    setCounter(prevCounter => prevCounter + 1);
     setCounter(prevCounter => prevCounter + 1);
      setCounter(prevCounter => prevCounter + 1);
       setCounter(prevCounter => prevCounter + 1);
  }
  const removeValue = () => {
    if (counter > 0) {
      setCounter(counter - 1)
      console.log("Removed",
        counter)
    }
  }
  return (
    <>
      <h1>Hook Started</h1>
      <h2>Counter Value : {counter}</h2>
      <btton onClick={addValue}>Add Value</button>
      <br />
      <button onClick={removeValue}>Remove Value</button>
    </>
  )
}


OutPut : Counter is 15 it become 16, 17, 18, 19 

5 : What is React?
-React is an open-source front-end JavaScript library that is used for building composable user interfaces, especially for single-page applications. 
-It is used for handling view layer for web and mobile apps based on components in a declarative approach.
-React was created by Jordan Walke, a software engineer working for Facebook. 
-React was first deployed on Facebook's News Feed in 2011 and on Instagram in 2012.

6 : What is the history behind React evolution?
The history of ReactJS started in 2010 with the creation of XHP. XHP is a PHP extension which improved the syntax of the language such that XML document fragments become valid PHP expressions and the primary purpose was used to create custom and reusable HTML elements.
The main principle of this extension was to make front-end code easier to understand and to help avoid cross-site scripting attacks. The project was successful to prevent the malicious content submitted by the scrubbing user.
But there was a different problem with XHP in which dynamic web applications require many roundtrips to the server, and XHP did not solve this problem. Also, the whole UI was re-rendered for small change in the application. Later, 
the initial prototype of React is created with the name FaxJ by Jordan inspired from XHP. Finally after sometime React has been introduced as a new library into JavaScript world.
Note: JSX comes from the idea of XHP

7 : What are the major features of React?
The major features of React are:

-Uses JSX syntax, a syntax extension of JS that allows developers to write HTML in their JS code.
-It uses Virtual DOM instead of Real DOM considering that Real DOM manipulations are expensive.
-Supports server-side rendering which is useful for Search Engine Optimizations(SEO).
-Follows Unidirectional or one-way data flow or data binding.
-Uses reusable/composable UI components to develop the view.

8 : What is JSX?
-JSX stands for JavaScript XML and it is an XML-like syntax extension to ECMAScript. Basically it just provides the syntactic sugar for the React.createElement(type, props, ...children) function, giving us expressiveness of JavaScript along with HTML like template syntax.

In the example below, the text inside <h1> tag is returned as JavaScript function to the render function.

export default function App() {
  return <h1 className="greeting">{"Hello, this is a JSX Code!"}</h1>;
}

If you don't use JSX syntax then the respective JavaScript code should be written as below,

import { createElement } from "react";

export default function App() {
  return createElement(
    "h1",
    { className: "greeting" },
    "Hello, this is a JSX Code!"
  );
}

9 : What is the difference between Element and Component?

https://www.coursehero.com/tutors-problems/Chemistry/43567929-A-compound-differs-from-a-mixture-in-that-a-compound-A-compound/

10 : How to create components in React?
-Components are the building blocks of creating User Interfaces(UI) in React. There are two possible ways to create a component.

a> Function Components: This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as the one and only one parameter and return React elements to render the output:

function Greeting({ message }) {
  return <h1>{`Hello, ${message}`}</h1>;
}

b> Class Components: You can also use ES6 class to define a component. The above function component can be written as a class component:

class Greeting extends React.Component {
  render() {
    return <h1>{`Hello, ${this.props.message}`}</h1>;
  }

11 : When to use a Class Component over a Function Component?

12 : What are Pure Components?

13 : What is state in React?
-State of a component is an object that holds some information that may change over the lifetime of the component. 
-The important point is whenever the state object changes, the component re-renders. 
-It is always recommended to make our state as simple as possible and minimize the number of stateful components.

Let's take an example of User component with message state. Here, useState hook has been used to add state to the User component and it returns an array with current state and function to update it.

import { useState } from "react";

function User() {
  const [message, setMessage] = useState("Welcome to React world");

  return (
    <div>
      <h1>{message}</h1>
    </div>
  );
}

14 : What are props in React?
-Props are inputs to components. They are single values or objects containing a set of values that are passed to components on creation similar to HTML-tag attributes. 
-Here, the data is passed down from a parent component to a child component.

-The primary purpose of props in React is to provide following component functionality:

: Pass custom data to your component.
: Trigger state changes.
: Use via this.props.reactProp inside component's render() method.

For example, the usage of props in function component looks like below:

import React from "react";
import ReactDOM from "react-dom";

const ChildComponent = (props) => {
  return (
    <div>
      <p>{props.name}</p>
      <p>{props.age}</p>
      <p>{props.gender}</p>
    </div>
  );
};

const ParentComponent = () => {
  return (
    <div>
      <ChildComponent name="John" age="30" gender="male" />
      <ChildComponent name="Mary" age="25" geneder="female" />
    </div>
  );
};

15 : What is the difference between state and props?