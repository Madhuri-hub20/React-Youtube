https://github.com/acdlite/react-fiber-architecture

What is Virtual DOM ?

What is React Fiber and Explian Architecture ?
Ans : React Fiber is an ongoing reimplementation of React's core algorithm. It is the culmination of over two years of research by the React team.
The goal of React Fiber is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is incremental rendering: the ability to split rendering work into chunks and spread it out over multiple frames.

What is react fiber fatures?
Ans : key features include the ability to pause, abort, or reuse work as new updates come in; the ability to assign priority to different types of updates; and new concurrency primitives.

What is reconciliation?
reconciliation
Ans : The algorithm React uses to diff one tree with another to determine which parts need to be changed.
update
A change in the data used to render a React app. Usually the result of `setState`. Eventually results in a re-render.

write a react application for counter and add one button for icreament and one button for decrement
Ans : 
import { useState } from 'react'

function App() {
  let [counter, setCounter] = useState(15);
  //let counter = 15
  const addValue = () => {
    console.log("Clicked", counter)
    //counter = counter + 1;
    setCounter(counter + 1);
  }
  const removeValue = () => {
    if (counter > 0) {
      setCounter(counter - 1)
      console.log("Removed",
        counter)
    }
  }
  return (
    <>
      <h1>Hook Started</h1>
      <h2>Counter Value : {counter}</h2>
      <button onClick={addValue}>Add Value</button>
      <br />
      <button onClick={removeValue}>Remove Value</button>
    </>
  )
}

export default App

Tell me the output of below functions ?

import { useState } from 'react'

function App() {
  let [counter, setCounter] = useState(15);
  //let counter = 15
  const addValue = () => {
    console.log("Clicked", counter)
    //counter = counter + 1;
    setCounter(counter + 1);
     setCounter(counter + 1);
      setCounter(counter + 1);
       setCounter(counter + 1);
  }
  const removeValue = () => {
    if (counter > 0) {
      setCounter(counter - 1)
      console.log("Removed",
        counter)
    }
  }
  return (
    <>
      <h1>Hook Started</h1>
      <h2>Counter Value : {counter}</h2>
      <btton onClick={addValue}>Add Value</button>
      <br />
      <button onClick={removeValue}>Remove Value</button>
    </>
  )
}

export default App

Output : if counter value is 15 it will become 16

reason in react state update in batches, so fiber finds same variable is there so it execute only one statement at on time.
other statement get ignored.

Solution for updating state continuosly function :

import { useState } from 'react'

function App() {
  let [counter, setCounter] = useState(15);
  const addValue = () => {
    console.log("Clicked", counter)
    setCounter(prevCounter => prevCounter + 1);
     setCounter(prevCounter => prevCounter + 1);
      setCounter(prevCounter => prevCounter + 1);
       setCounter(prevCounter => prevCounter + 1);
  }
  const removeValue = () => {
    if (counter > 0) {
      setCounter(counter - 1)
      console.log("Removed",
        counter)
    }
  }
  return (
    <>
      <h1>Hook Started</h1>
      <h2>Counter Value : {counter}</h2>
      <btton onClick={addValue}>Add Value</button>
      <br />
      <button onClick={removeValue}>Remove Value</button>
    </>
  )
}


OutPut : Counter is 15 it become 16, 17, 18, 19 